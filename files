[{"name":"dijsktra's_algo.CPP","path":"algorithms/Dijsktra's_algo/dijsktra's_algo.CPP","sha":"7d52316344bccec74aa7ed81d1d5dd5c40e13a93","size":3189,"url":"https://api.github.com/repos/developer-student-club-thapar/algo-book/contents/algorithms/Dijsktra's_algo/dijsktra's_algo.CPP?ref=master","html_url":"https://github.com/developer-student-club-thapar/algo-book/blob/master/algorithms/Dijsktra's_algo/dijsktra's_algo.CPP","git_url":"https://api.github.com/repos/developer-student-club-thapar/algo-book/git/blobs/7d52316344bccec74aa7ed81d1d5dd5c40e13a93","download_url":"https://raw.githubusercontent.com/developer-student-club-thapar/algo-book/master/algorithms/Dijsktra's_algo/dijsktra's_algo.CPP","type":"file","_links":{"self":"https://api.github.com/repos/developer-student-club-thapar/algo-book/contents/algorithms/Dijsktra's_algo/dijsktra's_algo.CPP?ref=master","git":"https://api.github.com/repos/developer-student-club-thapar/algo-book/git/blobs/7d52316344bccec74aa7ed81d1d5dd5c40e13a93","html":"https://github.com/developer-student-club-thapar/algo-book/blob/master/algorithms/Dijsktra's_algo/dijsktra's_algo.CPP"},"content":"\n// A C++ program for Dijkstra's single source shortest path algorithm. \n// The program is for adjacency matrix representation of the graph \n  \n#include <limits.h> \n#include <stdio.h> \n  \n// Number of vertices in the graph \n#define V 9 \n  \n// A utility function to find the vertex with minimum distance value, from \n// the set of vertices not yet included in shortest path tree \nint minDistance(int dist[], bool sptSet[]) \n{ \n    // Initialize min value \n    int min = INT_MAX, min_index; \n  \n    for (int v = 0; v < V; v++) \n        if (sptSet[v] == false && dist[v] <= min) \n            min = dist[v], min_index = v; \n  \n    return min_index; \n} \n  \n// A utility function to print the constructed distance array \nvoid printSolution(int dist[]) \n{ \n    printf(\"Vertex \\t\\t Distance from Source\\n\"); \n    for (int i = 0; i < V; i++) \n        printf(\"%d \\t\\t %d\\n\", i, dist[i]); \n} \n  \n// Function that implements Dijkstra's single source shortest path algorithm \n// for a graph represented using adjacency matrix representation \nvoid dijkstra(int graph[V][V], int src) \n{ \n    int dist[V]; // The output array.  dist[i] will hold the shortest \n    // distance from src to i \n  \n    bool sptSet[V]; // sptSet[i] will be true if vertex i is included in shortest \n    // path tree or shortest distance from src to i is finalized \n  \n    // Initialize all distances as INFINITE and stpSet[] as false \n    for (int i = 0; i < V; i++) \n        dist[i] = INT_MAX, sptSet[i] = false; \n  \n    // Distance of source vertex from itself is always 0 \n    dist[src] = 0; \n  \n    // Find shortest path for all vertices \n    for (int count = 0; count < V - 1; count++) { \n        // Pick the minimum distance vertex from the set of vertices not \n        // yet processed. u is always equal to src in the first iteration. \n        int u = minDistance(dist, sptSet); \n  \n        // Mark the picked vertex as processed \n        sptSet[u] = true; \n  \n        // Update dist value of the adjacent vertices of the picked vertex. \n        for (int v = 0; v < V; v++) \n  \n            // Update dist[v] only if is not in sptSet, there is an edge from \n            // u to v, and total weight of path from src to  v through u is \n            // smaller than current value of dist[v] \n            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX \n                && dist[u] + graph[u][v] < dist[v]) \n                dist[v] = dist[u] + graph[u][v]; \n    } \n  \n    // print the constructed distance array \n    printSolution(dist); \n} \n  \n// driver program to test above function \nint main() \n{ \n    /* Let us create the example graph discussed above */\n    int graph[V][V] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0 }, \n                        { 4, 0, 8, 0, 0, 0, 0, 11, 0 }, \n                        { 0, 8, 0, 7, 0, 4, 0, 0, 2 }, \n                        { 0, 0, 7, 0, 9, 14, 0, 0, 0 }, \n                        { 0, 0, 0, 9, 0, 10, 0, 0, 0 }, \n                        { 0, 0, 4, 14, 10, 0, 2, 0, 0 }, \n                        { 0, 0, 0, 0, 0, 2, 0, 1, 6 }, \n                        { 8, 11, 0, 0, 0, 0, 1, 0, 7 }, \n                        { 0, 0, 2, 0, 0, 0, 6, 7, 0 } }; \n  \n    dijkstra(graph, 0); \n  \n    return 0; \n} \n"},{"name":"dijsktra's_algo.js","path":"algorithms/Dijsktra's_algo/dijsktra's_algo.js","sha":"ab09c35cc8a91d2dccd9058d482314f18e3a430d","size":1359,"url":"https://api.github.com/repos/developer-student-club-thapar/algo-book/contents/algorithms/Dijsktra's_algo/dijsktra's_algo.js?ref=master","html_url":"https://github.com/developer-student-club-thapar/algo-book/blob/master/algorithms/Dijsktra's_algo/dijsktra's_algo.js","git_url":"https://api.github.com/repos/developer-student-club-thapar/algo-book/git/blobs/ab09c35cc8a91d2dccd9058d482314f18e3a430d","download_url":"https://raw.githubusercontent.com/developer-student-club-thapar/algo-book/master/algorithms/Dijsktra's_algo/dijsktra's_algo.js","type":"file","_links":{"self":"https://api.github.com/repos/developer-student-club-thapar/algo-book/contents/algorithms/Dijsktra's_algo/dijsktra's_algo.js?ref=master","git":"https://api.github.com/repos/developer-student-club-thapar/algo-book/git/blobs/ab09c35cc8a91d2dccd9058d482314f18e3a430d","html":"https://github.com/developer-student-club-thapar/algo-book/blob/master/algorithms/Dijsktra's_algo/dijsktra's_algo.js"},"content":"djikstraAlgorithm(startNode) {\n   let distances = {};\n\n   // Stores the reference to previous nodes\n   let prev = {};\n   let pq = new PriorityQueue(this.nodes.length * this.nodes.length);\n\n   // Set distances to all nodes to be infinite except startNode\n   distances[startNode] = 0;\n   pq.enqueue(startNode, 0);\n   this.nodes.forEach(node => {\n      if (node !== startNode) distances[node] = Infinity;\n      prev[node] = null;\n   });\n\n   while (!pq.isEmpty()) {\n      let minNode = pq.dequeue();\n      let currNode = minNode.data;\n      let weight = minNode.priority;\n      this.edges[currNode].forEach(neighbor => {\n         let alt = distances[currNode] + neighbor.weight;\n         if (alt < distances[neighbor.node]) {\n            distances[neighbor.node] = alt;\n            prev[neighbor.node] = currNode;\n            pq.enqueue(neighbor.node, distances[neighbor.node]);\n         }\n      });\n   }\n   return distances;\n}\n\nlet g = new Graph();\ng.addNode(\"A\");\ng.addNode(\"B\");\ng.addNode(\"C\");\ng.addNode(\"D\");\ng.addNode(\"E\");\ng.addNode(\"F\");\ng.addNode(\"G\");\n\ng.addDirectedEdge(\"A\", \"C\", 100);\ng.addDirectedEdge(\"A\", \"B\", 3);\ng.addDirectedEdge(\"A\", \"D\", 4);\ng.addDirectedEdge(\"D\", \"C\", 3);\ng.addDirectedEdge(\"D\", \"E\", 8);\ng.addDirectedEdge(\"E\", \"F\", 10);\ng.addDirectedEdge(\"B\", \"G\", 9);\ng.addDirectedEdge(\"E\", \"G\", 50);\n\nconsole.log(g.djikstraAlgorithm(\"A\"));\n"},{"name":"dijsktra's_algo.md","path":"algorithms/Dijsktra's_algo/dijsktra's_algo.md","sha":"8b086d181da0f23cbe644ff13b50332dae580065","size":5840,"url":"https://api.github.com/repos/developer-student-club-thapar/algo-book/contents/algorithms/Dijsktra's_algo/dijsktra's_algo.md?ref=master","html_url":"https://github.com/developer-student-club-thapar/algo-book/blob/master/algorithms/Dijsktra's_algo/dijsktra's_algo.md","git_url":"https://api.github.com/repos/developer-student-club-thapar/algo-book/git/blobs/8b086d181da0f23cbe644ff13b50332dae580065","download_url":"https://raw.githubusercontent.com/developer-student-club-thapar/algo-book/master/algorithms/Dijsktra's_algo/dijsktra's_algo.md","type":"file","_links":{"self":"https://api.github.com/repos/developer-student-club-thapar/algo-book/contents/algorithms/Dijsktra's_algo/dijsktra's_algo.md?ref=master","git":"https://api.github.com/repos/developer-student-club-thapar/algo-book/git/blobs/8b086d181da0f23cbe644ff13b50332dae580065","html":"https://github.com/developer-student-club-thapar/algo-book/blob/master/algorithms/Dijsktra's_algo/dijsktra's_algo.md"},"content":"<div id=\"file\" class=\"md\" data-path=\"algorithms/Dijsktra&amp;#39;s_algo/dijsktra&amp;#39;s_algo.md\"><article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1><a id=\"user-content-dijsktras-algorithm\" class=\"anchor\" aria-hidden=\"true\" href=\"#dijsktras-algorithm\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Dijsktra's Algorithm</h1>\n<p> </p>\n<h2><a id=\"user-content-what-is-dijsktras-algorithm\" class=\"anchor\" aria-hidden=\"true\" href=\"#what-is-dijsktras-algorithm\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>What is Dijsktra's Algorithm?</h2>\n<p>Dijkstra's Algorithm allows you to calculate the shortest path between one node (you pick which one) and every other node in the graph.\nDijkstra’s algorithm is very similar to Prim’s algorithm for minimum spanning tree. Like Prim’s MST, we generate a SPT (shortest path tree) with given source as root. We maintain two sets, one set contains vertices included in shortest path tree, other set includes vertices not yet included in shortest path tree. At every step of the algorithm, we find a vertex which is in the other set (set of not yet included) and has a minimum distance from the source.</p>\n<p> </p>\n<h2><a id=\"user-content-why-dijsktras-algorithm\" class=\"anchor\" aria-hidden=\"true\" href=\"#why-dijsktras-algorithm\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Why Dijsktra's Algorithm?</h2>\n<ul>\n<li>\n<p>It is used in IP routing to find Open shortest Path First.</p>\n</li>\n<li>\n<p>It is used in finding Shortest Path.</p>\n</li>\n<li>\n<p>To find locations of Map which refers to vertices of graph.</p>\n</li>\n<li>\n<p>Distance between the location refers to edges.</p>\n</li>\n</ul>\n<p> </p>\n<h2><a id=\"user-content-some-cons-of-dijsktras-algorithm\" class=\"anchor\" aria-hidden=\"true\" href=\"#some-cons-of-dijsktras-algorithm\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Some Cons of Dijsktra's Algorithm</h2>\n<ul>\n<li>It do blind search so wastes lot of time while processing.</li>\n<li>It cannot handle negative edges</li>\n<li>This leads to acyclic graphs and most often cannot obtain the right shortest path.</li>\n</ul>\n<p> </p>\n<h2><a id=\"user-content-explanation\" class=\"anchor\" aria-hidden=\"true\" href=\"#explanation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Explanation</h2>\n<p>Let the node at which we are starting be called the initial node. Let the distance of node Y be the distance from the initial node to Y. Dijkstra's algorithm will assign some initial distance values and will try to improve them step by step.</p>\n<ol>\n<li>\n<p>Mark all nodes unvisited. Create a set of all the unvisited nodes called the unvisited set.</p>\n</li>\n<li>\n<p>Assign to every node a tentative distance value: set it to zero for our initial node and to infinity for all other nodes. Set the initial node as current.</p>\n</li>\n<li>\n<p>For the current node, consider all of its unvisited neighbours and calculate their tentative distances through the current node. Compare the newly calculated tentative distance to the current assigned value and assign the smaller one. For example, if the current node A is marked with a distance of 6, and the edge connecting it with a neighbour B has length 2, then the distance to B through A will be 6 + 2 = 8. If B was previously marked with a distance greater than 8 then change it to 8. Otherwise, the current value will be kept.</p>\n</li>\n<li>\n<p>When we are done considering all of the unvisited neighbours of the current node, mark the current node as visited and remove it from the unvisited set. A visited node will never be checked again.</p>\n</li>\n<li>\n<p>If the destination node has been marked visited (when planning a route between two specific nodes) or if the smallest tentative distance among the nodes in the unvisited set is infinity (when planning a complete traversal; occurs when there is no connection between the initial node and remaining unvisited nodes), then stop. The algorithm has finished.</p>\n</li>\n<li>\n<p>Otherwise, select the unvisited node that is marked with the smallest tentative distance, set it as the new \"current node\", and go back to step 3.</p>\n</li>\n</ol>\n<p> </p>\n<h2><a id=\"user-content-example\" class=\"anchor\" aria-hidden=\"true\" href=\"#example\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example</h2>\n<p>Let us trace the above algorithm using an example:</p>\n<p>Consider the following inputs:</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"images/dj1.jpg\"><img src=\"images/dj1.jpg\" width=\"300px\" alt=\"represent\" style=\"max-width:100%;\"></a></p>\n<p>Step 1: The set sptSet is initially empty and distances assigned to vertices are {0, INF, INF, INF, INF, INF, INF, INF} where INF indicates infinite. Now pick the vertex with minimum distance value. The vertex 0 is picked, include it in sptSet. So sptSet becomes {0}. After including 0 to sptSet, update distance values of its adjacent vertices. Adjacent vertices of 0 are 1 and 7. The distance values of 1 and 7 are updated as 4 and 8. Following subgraph shows vertices and their distance values, only the vertices with finite distance values are shown. The vertices included in SPT are shown in green colour.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"images/dj2.jpg\"><img src=\"images/dj2.jpg\" width=\"200px\" alt=\"represent\" style=\"max-width:100%;\"></a></p>\n<p>Step 2: Pick the vertex with minimum distance value and not already included in SPT (not in sptSET). The vertex 1 is picked and added to sptSet. So sptSet now becomes {0, 1}. Update the distance values of adjacent vertices of 1. The distance value of vertex 2 becomes 12.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"images/dj3.jpg\"><img src=\"images/dj3.jpg\" width=\"200px\" alt=\"represent\" style=\"max-width:100%;\"></a></p>\n<p>Step 3: Pick the vertex with minimum distance value and not already included in SPT (not in sptSET). Vertex 7 is picked. So sptSet now becomes {0, 1, 7}. Update the distance values of adjacent vertices of 7. The distance value of vertex 6 and 8 becomes finite (15 and 9 respectively).</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"images/dj4.jpg\"><img src=\"images/dj4.jpg\" width=\"200px\" alt=\"represent\" style=\"max-width:100%;\"></a></p>\n<p>Step 4: Pick the vertex with minimum distance value and not already included in SPT (not in sptSET). Vertex 6 is picked. So sptSet now becomes {0, 1, 7, 6}. Update the distance values of adjacent vertices of 6. The distance value of vertex 5 and 8 are updated.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"images/dj5.jpg\"><img src=\"images/dj5.jpg\" width=\"300px\" alt=\"represent\" style=\"max-width:100%;\"></a></p>\n<p>Step 5: We repeat the above steps until sptSet does include all vertices of given graph. Finally, we get the following Shortest Path Tree (SPT).</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"images/dj6.jpg\"><img src=\"images/dj6.jpg\" width=\"300px\" alt=\"represent\" style=\"max-width:100%;\"></a></p>\n<h2><a id=\"user-content-psuedo-code\" class=\"anchor\" aria-hidden=\"true\" href=\"#psuedo-code\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Psuedo Code</h2>\n<p> </p>\n<pre><code>function Dijkstra(Graph, source):\n\n    create vertex set Q\n\n    for each vertex v in Graph:            \n       dist[v] ← INFINITY                 \n       prev[v] ← UNDEFINED                \n       add v to Q                     \n   dist[source] ← 0                       \n \n   while Q is not empty:\n      u ← vertex in Q with min dist[u]   \n                                         \n      remove u from Q\n     \n      for each neighbor v of u:           // only v that are still in Q\n          alt ← dist[u] + length(u, v)\n          if alt &lt; dist[v]:              \n              dist[v] ← alt\n              prev[v] ← u\n\n   return dist[], prev[]\n</code></pre>\n</article></div>"}]